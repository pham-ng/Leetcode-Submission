3. Longest Substring Without Repeating Characters

Given a string s, find the length of the longest substring without duplicate characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.




class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_set<char> windows;
        int left = 0, max_len = 0;
        for (int i = 0; i < s.length(); i++) {
            while (windows.find(s[i]) != windows.end()) {
                windows.erase(s[left]);
                ++left;
            }
            windows.insert(s[i]);
            max_len = max(max_len, i - left + 1);
        }
        return max_len;
    }
};


